#+OPTIONS: toc:nil
Title: Unifying Reifying and Symbolic-PyMC
Author: Joseph Willard
Date: 

* Introduction
In this post I'll cover the basics of unifying and reifying expressions and there motivations for symbolic-pymc.

* COMMENT Motivation
# Need to add motivation here
# want to find patterns in graphs and from these produce new graphs where we have applied symbolic math 
# Why is this useful?


Let's look at a basic example

#+BEGIN_SRC python -n :exports both :results output
  import numpy as np

  X = np.random.normal(0, 1, (10, 10))
  S = X.T.dot(X)
  U, d, Vt = np.linalg.svd(S)
  print(S)
  #print(S - np.dot(U*d, Vt))
#+END_SRC

#+RESULTS:
#+begin_example
[[ 8.10443677  6.69251407 -1.73944385  2.25536557 -1.44948848  0.19932606
   1.8836972   0.46495306 -4.23247986  1.18877419]
 [ 6.69251407 16.66592098  1.82979241 -0.17555944  1.40028483  7.67598842
   2.74059863  0.49841579 -3.43716916  8.47415802]
 [-1.73944385  1.82979241  6.45085253 -5.14045864  3.02357519 -0.29781238
  -2.3852535   2.53577388  1.41301427  0.82238915]
 [ 2.25536557 -0.17555944 -5.14045864 10.59621888 -1.05385232  4.88058911
   2.47296055  2.22281434 -0.28286398  0.80106906]
 [-1.44948848  1.40028483  3.02357519 -1.05385232  4.85376418  2.05278959
  -0.18633497  1.06927664 -0.04442789  0.48666845]
 [ 0.19932606  7.67598842 -0.29781238  4.88058911  2.05278959 15.65076731
   2.30220281  5.41169121 -2.4318268   6.66129441]
 [ 1.8836972   2.74059863 -2.3852535   2.47296055 -0.18633497  2.30220281
   7.21892701 -2.60365998 -1.77270086 -1.37440839]
 [ 0.46495306  0.49841579  2.53577388  2.22281434  1.06927664  5.41169121
  -2.60365998  9.41239417  0.47791896  0.79319451]
 [-4.23247986 -3.43716916  1.41301427 -0.28286398 -0.04442789 -2.4318268
  -1.77270086  0.47791896  7.10274067 -0.93554375]
 [ 1.18877419  8.47415802  0.82238915  0.80106906  0.48666845  6.66129441
  -1.37440839  0.79319451 -0.93554375  9.62963789]]
#+end_example

In regards to theory this should have been 0, but do to rounding errors mostly drawn from limitations of floats this is not the case. A natural question to ask is whether there is a way around this. To provide an answer to this we need to introduce minikanren/logpy and the concepts of unify, reify and goals.



# Do SVD in TF and see if it still has the numeric error and use this example
#+BEGIN_SRC python -n :exports both :results output
  """ Seeing if tensorflow has the same issue
  """
  import tensorflow as tf
  import tensorflow_probability as tfp
  from tensorflow.python.framework.ops import disable_eager_execution
  tf.InteractiveSession()

  disable_eager_execution()
  tfp = tfp.distributions
  X = tfp.Normal(loc=0, scale=1)
  X = X.sample([10, 10])

  S = tf.tensordot(tf.transpose(X), X, 1)

  U, d, Vt = tf.linalg.svd(S)

  #ans = S - tf.tensordot(U*d, Vt, 1)
  ans = S - tf.tensordot(d*U, Vt, 1)
  print(ans.eval())
  # Chris was suggesting something like this to turn off eager mode
  # import tensorflow.compat.v2 as tf
  # tf.enable_v2_behavior
#+END_SRC

#+RESULTS:
#+begin_example

WARNING: The TensorFlow contrib module will not be included in TensorFlow 2.0.
For more information, please see:
  ,* https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md
  ,* https://github.com/tensorflow/addons
If you depend on functionality not listed there, please file an issue.

[[ 1.1252207e+01 -3.6893898e-01 -4.7169094e+00 -2.3759778e+00
  -2.7518475e-01  2.3077214e+00 -2.2148860e-01  3.7900646e+00
   9.2848539e-03 -1.9226546e+00]
 [ 1.1027694e+00  5.1173925e+00 -2.5224431e+00  8.7815857e+00
   6.4371819e+00 -2.9934659e+00 -5.3651299e+00  4.1261590e-01
   4.2966547e+00 -1.9035205e+00]
 [-2.4870121e+00 -5.0484586e-01  1.8896112e+00 -1.7252587e+00
   2.3558454e-01 -2.6020455e-01 -7.4684632e-01  1.5798866e+00
   2.0205488e+00  1.4755418e+00]
 [-1.8404617e+00  9.3913431e+00 -5.0629026e-01  1.5753553e+01
   1.4900604e+01 -5.1764765e+00 -1.0806535e+01  2.4843884e+00
  -4.0670800e+00 -5.5632730e+00]
 [-2.7935195e+00  7.5058608e+00 -1.6156479e+00  7.4871902e+00
   1.2572113e+01 -4.2184935e+00 -1.0495855e+01  7.6306295e+00
  -7.9978170e+00 -7.2492323e+00]
 [ 8.1373870e-01 -2.7680688e+00  1.1684740e+00 -5.2537508e+00
  -1.9381149e+00  5.7845712e+00  1.1258600e+00  5.0065308e+00
  -3.6377077e+00  1.2874970e+00]
 [-3.9003892e+00 -4.7955275e+00  4.1601372e+00 -6.3509088e+00
  -6.2124543e+00  4.5323048e+00  6.8936143e+00 -5.9301119e+00
   1.0869396e+00  6.0019331e+00]
 [ 6.8113327e-01  1.0478487e+00 -1.7268178e+00  8.7355042e-01
   9.2089081e-01 -3.4342916e+00 -3.1592460e+00  6.3375401e+00
  -7.0218668e+00 -4.0386205e+00]
 [ 2.5703888e+00 -4.0682430e+00 -1.3385743e+00 -7.6910896e+00
  -7.1330533e+00  1.1596898e+00  6.0371194e+00 -6.4142809e+00
   1.2235129e+01  5.2758493e+00]
 [-8.2589579e+00 -3.2089128e+00  5.0353928e+00 -3.4152830e+00
  -4.4947405e+00 -2.3546405e+00  4.8966484e+00 -8.5752373e+00
   4.3229051e+00  5.4012055e+00]]
#+end_example




* Unify
The idea behind unify is to take two similar terms and form a *substitution* which can be thought of as a mapping between variables and values. Let's look at a few quick examples,

| Constant | Variable | Substitution |
| (4, 5)   | (x, 5)   | {x: 4}       |
| 'test'   | 'txst'   | {x: 'e'}     |

In layman's terms at this point we are looking for effectively the set of values that make the statement true. Below are some examples of terms that do not unify,

| Constant | Variable | Substitution |
| (4, 5)   | (3, x)   | NA           |
| 'test'   | 'exror'  | NA           |


* Reify
Reify is the opposite operation to unify. This implies that it takes a variable and a substitution and returns a value that contains no variables. Below is a quick example,


| Variable | Substitution | Constant |
| (x, 10)  | {x: 5}       | (5, 10)  |
| 'mxsic'  | {x: 'u'}     | 'music'  |

* Goals and there constructors
Using the two concepts above we can now introduce the idea of a goal. A goal is effectively a stream of substitutions which can be demonstrated in the following example,

Given that `x is a member of both `(8, 5, 2) and `(5, 2, 9) a stream of substitutions are {x: 5}, {x: 2}.

* Returning to our question

* How does this relate to what I'm doing for GSoC?
